scalar Date

enum Alignment {
  GOOD
  BAD
  NEUTRAL
}

type Character {
  id: ID!
  name: String!
  alignment: Alignment
  books: [Book]!
}

input CreateCharacter {
  name: String!
  alignment: Alignment
}

input UpdateCharacter {
  name: String
  alignment: Alignment
}

type Book {
  id: ID!
  title: String!
  pages: Int!
  publishedYear: Int!
  author: Author!
  characters: [Character]!
}

input CreateBookInput {
  title: String!
  pages: Int!
  publishedYear: Int!
}

input UpdateBookInput {
  title: String
  pages: Int
  publishedYear: Int
}

type Author {
  id: ID!
  name: String!
  born: Date
  died: Date
  books: [Book]!
}

input CreateAuthorInput {
  name: String!
  born: String
  died: String
}

input UpdateAuthorInput {
  name: String
  born: String
  died: String
}

type AuthorBookConnection {
  author: Author!
  book: Book!
}

type CharacterBookConnection {
  character: Character!
  book: Book!
}

type Query {
  character(id: ID!): Character
  book(id: ID!): Book
  series(name: String!): [Book]!
  author(id: ID!): Author
}

type Mutation {
  createBook(input: CreateBookInput!): Book
  updateBook(id: ID!, input: UpdateBookInput!): Book
  deleteBook(id: ID!): Boolean
  createAuthor(input: CreateAuthorInput!): Author
  updateAuthor(id: ID!, input: UpdateAuthorInput!): Author
  deleteAuthor(id: ID!): Boolean
  createCharacter(input: CreateCharacterInput!): Character
  updateCharacter(id: ID!, input: UpdateCharacterInput!): Character
  deleteCharacter(id: ID!): Boolean
  assignAuthorToBook(authorId: ID!, bookId: ID!): AuthorBookConnection
  assignCharacterToBook(characterId: ID!, bookId: ID!): CharacterBookConnection
}

type Subscription {
  onBookChanged: Book
}
